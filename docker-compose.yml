version: "3.9"

services:

####################
# Admin
####################
  


####################
# Network
####################

  pihole:
  # More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/
    container_name: pihole
    hostname: pihole
    image: pihole/pihole:latest
    profiles:
      - network
    
    depends_on:
      - unbound

    networks:
      dns-net:
        ipv4_address: 172.20.0.2

    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - ${PORT_PIHOLE_WEB:-80}:80
      - ${PORT_PIHOLE_WEBSSL:-443}:443
      - ${SERVER_URL}:${PORT_PIHOLE_TCP:-53}:53/tcp
      - ${SERVER_URL}:${PORT_PIHOLE_UDP:-53}:53/udp
    #  - ${PORT_PIHOLE_DHCP:-67}:67/udp # Only required if you are using Pi-hole as your DHCP server

    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${PIHOLE_PASSWORD}
      FTLCONF_LOCAL_IPV4: ${FTLCONF_LOCAL_IPV4}
      PIHOLE_DNS_: 172.20.0.3#5053
      DHCP_ACTIVE: ${PIHOLE_DHCP_ACTIVE:-false}
      PIHOLE_DOMAIN: ${PIHOLE_DOMAIN:-lan}
      DNSMASQ_LISTENING: 'all'

      TEMPERATUREUNIT: ${PIHOLE_TEMPUNIT:-c}
      WEBTHEME: ${PIHOLE_WEBTHEME:-default-dark}

    labels:
      - diun.enable=true
      - homepage.group=Network
      - homepage.name=Pihole
      - homepage.icon=pihole
      - homepage.href=http://${SERVER_URL}:${PORT_PIHOLE_WEB}/admin
      - homepage.description=Network-wide Adblocking and DNS
      - homepage.widget.type=pihole
      - homepage.widget.url=http://${SERVER_URL}:${PORT_PIHOLE_WEB}
      - homepage.widget.key=${HOMEPAGE_PIHOLE_API}

    volumes:
      - ${CONFIGDIR}/pihole/pihole:/etc/pihole
      - ${CONFIGDIR}/pihole/dnsmasq.d:/etc/dnsmasq.d
      - ${CONFIGDIR}/pihole/resolv.conf:/etc/resolv.conf
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities

    #cap_add:
    #  - NET_ADMIN # Recommended but not required (DHCP needs NET_ADMIN)


    deploy:
      resources:
        limits:
          memory: 256M
    healthcheck:
      test: ["CMD", "dig", "+norecurse", "+retry=0", "@127.0.0.1", "pi.hole"]
    restart: unless-stopped

  unbound:
    container_name: unbound
    image: mvance/unbound:latest
    profiles:
      - network

    networks:
      dns-net:
        ipv4_address: 172.20.0.3

    labels:
      - diun.enable=true
      - homepage.group=Network
      - homepage.name=Unbound
      - homepage.icon=pihole-unbound
      - homepage.description=A validating, recursive, caching DNS resolver

    volumes:
      - ${CONFIGDIR}/unbound:/opt/unbound/etc/unbound

    deploy:
      resources:
        limits:
          memory: 128M
    healthcheck:
      disable: true
    restart: unless-stopped

####################
# Back End Services
####################

  socky_proxy:
    container_name: socky_proxy
    image: ghcr.io/tecnativa/docker-socket-proxy:0.1 # A security-enhanced proxy for the Docker Socket.
    profiles:
      - admin
      - external
      - monitor

    privileged: true
  
    networks:
      - socky_proxy-net

    ports:
      - ${PORT_SOCKY_PROXY}:2375

    environment:
      # Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc).
      #   0 - revoke access
      #   1 - grant access
      CONTAINERS: 1 # crowdsec, diun, homepage
      IMAGES: 1 # diun
      INFO: 1 # crowdsec

    labels:
      - diun.enable=true
      - homepage.group=Back End
      - homepage.name=Docker Socket Proxy

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    
    healthcheck:
      test: wget --spider http://${SERVER_URL}:${PORT_SOCKY_PROXY}/version || exit 1
      interval: "30s"
      timeout: "5s"
      retries: 3
      start_period: "30s"

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 32M

    restart: always

####################
# System Information
####################

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    profiles:
      - monitor

    depends_on:
      - socky_proxy

    networks:
      - socky_proxy-net

    ports:
      - ${PORT_DOZZLE}:8080

    environment:
      DOCKER_HOST: tcp://socky_proxy:${PORT_SOCKY_PROXY} # redirects socket to the proxy
    
    labels:
      - diun.enable=true
      - homepage.group=System
      - homepage.name=Dozzle
      - homepage.icon=dozzle
      - homepage.href=http://${SERVER_URL}:${PORT_DOZZLE}
      - homepage.description=Docker Logs


    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 128M
    restart: always

####################
# Security
####################

  endlessh:
    image: ghcr.io/linuxserver/endlessh:latest
    container_name: endlessh
    profiles:
      - external

    ports:
      - ${PORT_SSHPROTECT:-22}:2222
    
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      MSDELAY: ${ESSH_MSDELAY:-10000} #optional
      MAXLINES: ${ESSH_MAXLINES:-32} #optional
      MAXCLIENTS: ${ESSH_MAXCLIENTS:-4096} #optional
      LOGFILE: ${DEBUG_LOG:-false} #optional. By default, the app logs to container log. If this is set to true, the log will be output to file under /config/logs/endlessh (/config needs to be mapped).
      BINDFAMILY: ${ESSH_BINDFAMILY} #optional

    #volumes:
    #  - ${CONFIGDIR}/endlessh:/config #Required if LOGFILE is set to true.

    labels:
      - diun.enable=true
      - homepage.group=Wild West
      - homepage.name=EndlessH
      - homepage.icon=endlessh
      - homepage.description=SSH Tarpit

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 32M  
    restart: unless-stopped


####################
# Docker Environment
####################

volumes:

networks:
  web:
    name: web
    external: true
  caddy-net:
    name: caddy-net
    external: true

  dns-net:
    name: dns-net
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

  socky_proxy-net:
    name: socky_proxy-net
